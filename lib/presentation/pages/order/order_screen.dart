import 'dart:convert';
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:mobile_abz/app/repository/repository.dart';
import 'package:mobile_abz/presentation/widgets/layouts.dart';
import 'package:mobile_abz/presentation/widgets/ui/custom_dropdown.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

@RoutePage()
class OrderScreen extends StatefulWidget {
  const OrderScreen({super.key});

  @override
  State<OrderScreen> createState() => _OrderScreenState();
}

class _OrderScreenState extends State<OrderScreen> {
  final ApiRepository _repository = ApiRepository();
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();

  bool _isLoading = false;
  String? _selectedService;
  String? _selectedDate;
  String? _selectedTime;
  Map<String, dynamic>? _activeBooking; // –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Å ID

  final List<String> _services = [
    '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–∫–ª–æ',
    '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–ª–ª',
    '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Å—Ç–∏–∫',
  ];

  final List<String> _dates = [
    '24 –§–µ–≤.',
    '25 –§–µ–≤.',
    '26 –§–µ–≤.',
    '27 –§–µ–≤.',
    '28 –§–µ–≤.',
    '29 –§–µ–≤.'
  ];

  final List<String> _times = ['16:00', '17:00', '18:00', '19:30', '20:00'];

  Future<void> _clearBooking() async {
    await _secureStorage.delete(key: 'active_booking');
    setState(() {
      _activeBooking = null;
    });
    print("üóë –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞");
  }

  @override
  void initState() {
    super.initState();
    _loadBooking();
    // _clearBooking();
  }

  /// **–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ Secure Storage**
  Future<void> _loadBooking() async {
    String? bookingData = await _secureStorage.read(key: 'active_booking');

    if (bookingData != null) {
      setState(() {
        _activeBooking = jsonDecode(bookingData);
      });
    }
  }

  /// **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Secure Storage**
  Future<void> _saveBooking(Map<String, dynamic> booking) async {
    await _secureStorage.write(
        key: 'active_booking', value: jsonEncode(booking));
    setState(() {
      _activeBooking = booking;
    });
  }

  /// **–ú–µ—Ç–æ–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**
  Future<void> _bookAppointment() async {
    if (_selectedService == null ||
        _selectedDate == null ||
        _selectedTime == null ||
        _nameController.text.isEmpty ||
        _phoneController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isLoading = true);
    print('good');
    try {
      final bookingData = {
        "name": _nameController.text,
        "phone": _phoneController.text,
        "service": _selectedService!,
        "date": _selectedDate!,
        "time": _selectedTime!,
      };

      final response = await _repository.sendFormData(bookingData);
      print('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: $response');

      if (response.containsKey('success') &&
          response['success'].toString().toLowerCase().contains('—É—Å–ø–µ—à–Ω–æ') &&
          response.containsKey('booking_id')) {
        bookingData['booking_id'] =
            response['booking_id'].toString(); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
        await _saveBooking(bookingData);

        print("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $bookingData");

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
      }
    } catch (e, stackTrace) {
      print("‚ùå –û—à–∏–±–∫–∞: $e");
      print("üìå Stack Trace: $stackTrace");

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _cancelBooking() async {
    print("üõ† –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ _activeBooking: $_activeBooking");

    if (_activeBooking == null || !_activeBooking!.containsKey('booking_id')) {
      print("‚ùå _cancelBooking –Ω–µ –≤—ã–∑–≤–∞–Ω: –Ω–µ—Ç booking_id");
      return;
    }

    setState(() => _isLoading = true);
    print(
        "‚úÖ _cancelBooking –≤—ã–∑–≤–∞–Ω, booking_id: ${_activeBooking!['booking_id']}");

    try {
      final response = await _repository
          .cancelBooking(_activeBooking!['booking_id'].toString());
      print("üì• –û—Ç–≤–µ—Ç –æ—Ç API: $response");

      if (response != null && response['success'] != null) {
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        await _secureStorage.delete(key: 'active_booking');
        setState(() {
          _activeBooking = null;
        });

        print("üóë –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ SecureStorage –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω");

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞'),
            backgroundColor: Colors.orange,
          ),
        );
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏');
      }
    } catch (e, stackTrace) {
      print("‚ùå –û—à–∏–±–∫–∞ –≤ _cancelBooking: $e");
      print("üìå Stack Trace: $stackTrace");

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Layouts(
      title: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–∞–º',
      isLoading: _isLoading,
      currentIndex: 3,
      slivers: [
        SliverFillRemaining(
          hasScrollBody: false,
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (_activeBooking != null) ...[
                    Container(
                      margin: EdgeInsets.only(bottom: 10),
                      width: double.infinity,
                      padding: EdgeInsets.all(14),
                      decoration: BoxDecoration(
                          color: Color(0xFFF8F8F8),
                          borderRadius: BorderRadius.circular(10)),
                      child: Text('–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å'),
                    ),
                    Container(
                      padding: EdgeInsets.all(14),
                      width: double.infinity,
                      margin: EdgeInsets.only(bottom: 10),
                      decoration: BoxDecoration(
                          border:
                              Border.all(width: 1, color: Color(0xFFE4E4E4)),
                          borderRadius: BorderRadius.circular(10)),
                      child: Text(
                        _activeBooking!['service'] ?? '',
                        style: const TextStyle(
                          fontSize: 16,
                        ),
                      ),
                    ),
                    Row(
                      children: [
                        Expanded(
                          child: Container(
                            padding: EdgeInsets.all(14),
                            width: double.infinity,
                            margin: EdgeInsets.only(bottom: 10),
                            decoration: BoxDecoration(
                                border: Border.all(
                                    width: 1, color: Color(0xFFE4E4E4)),
                                borderRadius: BorderRadius.circular(10)),
                            child: Text(
                              _activeBooking!['date'] ?? '',
                              style: const TextStyle(
                                fontSize: 16,
                              ),
                            ),
                          ),
                        ),
                        SizedBox(
                          width: 10,
                        ),
                        Expanded(
                          child: Container(
                            padding: EdgeInsets.all(14),
                            width: double.infinity,
                            margin: EdgeInsets.only(bottom: 10),
                            decoration: BoxDecoration(
                                border: Border.all(
                                    width: 1, color: Color(0xFFE4E4E4)),
                                borderRadius: BorderRadius.circular(10)),
                            child: Text(
                              _activeBooking!['time'] ?? '',
                              style: const TextStyle(
                                fontSize: 16,
                              ),
                            ),
                          ),
                        )
                      ],
                    ),
                    SizedBox(
                      height: 5,
                    ),
                    SizedBox(
                      height: 50,
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _cancelBooking,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: Colors.purple,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                            side: const BorderSide(color: Colors.purple),
                          ),
                        ),
                        child: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
                            style: TextStyle(fontSize: 16)),
                      ),
                    ),
                  ] else ...[
                    TextField(
                      controller: _nameController,
                      decoration: InputDecoration(
                        labelText: "–ò–º—è",
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                    const SizedBox(height: 11),
                    TextField(
                      controller: _phoneController,
                      keyboardType: TextInputType.phone,
                      decoration: InputDecoration(
                        labelText: "–¢–µ–ª–µ—Ñ–æ–Ω",
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    CustomDropdown(
                      items: _services,
                      selectedValue: _selectedService,
                      onChanged: (value) {
                        setState(() => _selectedService = value);
                      },
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          flex: 3,
                          child: CustomDropdown(
                            items: _dates,
                            selectedValue: _selectedDate,
                            onChanged: (value) {
                              setState(() => _selectedDate = value);
                            },
                          ),
                        ),
                        const SizedBox(width: 11),
                        Expanded(
                          flex: 2,
                          child: CustomDropdown(
                            items: _times,
                            selectedValue: _selectedTime,
                            onChanged: (value) {
                              setState(() => _selectedTime = value);
                            },
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 11),
                    SizedBox(
                      height: 50,
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _bookAppointment,
                        style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.purple,
                            foregroundColor: Colors.white),
                        child: _isLoading
                            ? const CircularProgressIndicator(
                                color: Colors.white)
                            : const Text('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
                                style: TextStyle(fontSize: 16)),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }
}
